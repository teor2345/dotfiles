# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "root-pool/system/root";
      fsType = "zfs";
    };

  fileSystems."/etc" =
    { device = "root-pool/system/etc";
      fsType = "zfs";
    };

  fileSystems."/nix" =
    { device = "root-pool/local/nix";
      fsType = "zfs";
    };

  fileSystems."/var" =
    { device = "root-pool/system/var";
      fsType = "zfs";
    };

  fileSystems."/home" =
    { device = "root-pool/user/home";
      fsType = "zfs";
    };

  fileSystems."/home/dev" =
    { device = "root-pool/user/home/dev";
      fsType = "zfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/a6e57657-1add-4436-a8df-2526ada4f6e5";
      fsType = "ext4";
    };

  fileSystems."/home/dev/.cache" =
    { device = "data-pool/user/cache-data/dev/cache";
      fsType = "zfs";
    };

  fileSystems."/home/dev/.zcash/blocks" =
    { device = "data-pool/user/zcashd/dev/mainnet/blocks";
      fsType = "zfs";
    };

  fileSystems."/home/dev/.zcash/chainstate" =
    { device = "data-pool/user/zcashd/dev/mainnet/chainstate";
      fsType = "zfs";
    };

  fileSystems."/var/lib/docker" =
    { device = "data-pool/docker";
      fsType = "zfs";
    };

  fileSystems."/home/dev/.zcash-testnet/testnet3/blocks" =
    { device = "data-pool/user/zcashd/dev/testnet/blocks";
      fsType = "zfs";
    };

  fileSystems."/home/dev/.zcash-testnet/testnet3/chainstate" =
    { device = "data-pool/user/zcashd/dev/testnet/chainstate";
      fsType = "zfs";
    };

  fileSystems."/home/dev/.cache/zebra-custom/state" =
    { device = "data-pool/user/zebra/dev/state";
      fsType = "zfs";
    };

  fileSystems."/home/dev/.cache/sccache" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/home/dev/.ccache" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/home/dev/zebra/target" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/var/tmp" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/c3d87297-3c80-430a-8ff1-753ea16eda0c"; }
      { device = "/dev/disk/by-uuid/42cc12b3-e633-421e-b180-d7ebd9b77574"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
